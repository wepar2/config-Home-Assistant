substitutions:
  device_name: "Timbre"

esphome:
  name: timbre
  platform: ESP8266
  board: esp01_1m

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  output_power: 8.5dB
  power_save_mode: none

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "TimbreAP"
    password: !secret hotspot_pass
  
  manual_ip:
    # Set this to the IP of the ESP
    static_ip: 192.168.1.35
    # Set this to the IP address of the router. Often ends with .1
    gateway: 192.168.1.1
    # The subnet of the network. 255.255.255.0 works for most home networks.
    subnet: 255.255.255.0

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:

# Enable OTA updates
ota:
  password: !secret ota_password

# Enable Web server (optional).
web_server:
  port: 8023
  #css_url: !secret cssURL
  

# Text sensors with general information.
text_sensor:
  - platform: wifi_info
    ip_address:
      name: ${device_name} IP

# Sensors with general information.
sensor:
  # Uptime sensor.
  - platform: uptime
    name: ${device_name} Uptime

  # WiFi Signal sensor.
  - platform: wifi_signal
    name: ${device_name} WiFi Signal
    update_interval: 60s

# Shelly 1 detached switch config with fallback in case of wifi or api fail

switch:
  - platform: gpio
    name: ${device_name}
    pin: GPIO4
    id: shelly_relay
    # after reboot, keep the relay off. this prevents light turning on after a power outage
    restore_mode: ALWAYS_OFF
    icon: "mdi:gate"
    on_turn_on:
    - delay: 300ms
    - switch.turn_off: shelly_relay
    
  - platform: restart
    name: "${device_name} Reboot"
    
  - platform: safe_mode
    name: "${device_name} (Safe Mode)"

binary_sensor:
  - platform: status
    name: "${device_name} Status"
    
  - platform: gpio
    name: "${device_name} Input"
    pin:
      number: GPIO5
    # small delay to prevent debouncing
    filters:
      - delayed_on_off: 50ms
    # config for state change of input button
    on_state:
        then:
          - if:
              condition:
                and:
                  - wifi.connected:
                  - api.connected:
                  - switch.is_on: shelly_relay
              # toggle smart light if wifi and api are connected and relay is on
              then:
                - homeassistant.service:
                    service: light.toggle
                    data:
                      entity_id: light.timbre
              # else, toggle relay
              else:
                - switch.toggle: shelly_relay
    id: button